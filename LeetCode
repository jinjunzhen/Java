<7> Reverse Integer

class Solution {
    public int reverse(int x) {
        int sign = 1;
        
        while (x % 10 == 0 && x!=0) 
            x = x / 10;
        
        int y = 0;
        String str, strReverse;
        
        if ( x > 2147483647 || x < -2147483648 || x == 0)
            return 0;
        
        if ( x<0 ) {
            y = - x;
            sign = -1;
        }
        else {
            y = x;
            sign = 1;
        }
        
        str = Integer.toString(y);  // z contains number string
        
        StringBuilder sb = new StringBuilder(str);
        
        
        strReverse = sb.reverse().toString();
        
        try{
            y = Integer.valueOf(strReverse);
        }catch (NumberFormatException ex) { 
            // handle your exception
            return 0;
        }
        
        y = y * sign;
        
        return y;
        
    }
}


solutioon:

        int rev = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;
            if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
            rev = rev * 10 + pop;
        }
        return rev;


<9>

my solution:

class Solution {
    public boolean isPalindrome(int x) {
        
        String str = Integer.toString(x);
        
        
        StringBuilder sb = new StringBuilder(str);
        String strRev = sb.reverse().toString();
        
        if (strRev.equals(str)) 
            return true;
        else
            return false;
        
    }
}





sample solution:

    class Solution {
    public boolean isPalindrome(int x) {
        
        if(x<0){
            return false;
        }
        
        int length = String.valueOf(x).length();
        int[] digits = new int[length];
        
        for(int i = 0; i<length; i++){
            digits[i] = x % 10;
            x = x / 10;
        }
        
        for(int j = 0; j < digits.length/2; j++){
            if(digits[j] != digits[digits.length - 1 - j]){
                return false;
            }
        }
        
        return true;
        
    }
}

<13> Roman to Integar

class Solution {
    public int romanToInt(String s) {
        int sum = 0;
        char ch;
        ArrayList<Integer> list = new ArrayList<Integer>();
        

        for (int i = 0; i < s.length(); i++) {
            ch = s.charAt(i);
            switch (ch) {
                case 'I':
                    list.add(1);
                    break;
                case 'V':
                    list.add(5);
                    break;
                case 'X':
                    list.add(10);
                    break;
                case 'L':
                    list.add(50);
                    break;
                case 'C':
                    list.add(100);
                    break;
                case 'D':
                    list.add(500);
                    break;
                case 'M':
                    list.add(1000);
                    break;
                default:
                    //this is it. 
            }
        }
        // hereby, arraylist has all number filled in.
        
        int max = list.size();
        
        for (int i =0; i<max-1; i++) {
            if (list.get(i) < list.get(i+1))
                sum -= list.get(i);
            else
                sum += list.get(i);
        }
        sum += list.get(max-1);
        return sum; 
    }
}

=======================================================
<38>
=======================================================

class Solution {
    public String countAndSay(int n) {
        String []answer = new String[n+1];
        int count = 1;
        
        answer[0] = null;
        answer[1] = "1";
        
        String result;
        StringBuilder sb = new StringBuilder();
        
        
        
        for (int i = 2; i <= n ; i++ ){
            sb.setLength(0);  // empty stringBuilder
            
            for (int j =0; j< answer[i-1].length() -1 ; j++) {
                count = 1;
                while(answer[i-1].charAt(j) == answer[i-1].charAt(j+1)) { 
                    count ++;
                }
                sb.append(count);
                sb.append(answer[i-1].charAt(j));
                count = 1;
            }
            sb.append("" + count);
            sb.append(answer[i-1].charAt(answer[i-1].length() -1));
            
            answer[i] = sb.toString();
        }   
        result =   answer[n]; 
        return result;
    }
}

<38>

class Solution {
    public int maxSubArray(int[] nums) {
        int overAllMax = 0;
        int currentMax = 0;
        int currentSum = 0;
        int max = nums[0];
        
        
        for ( int i = 0; i < nums.length ; i ++ ) {
            currentSum = currentSum + nums[i];
            
            if ( currentSum < 0) { 
                currentSum = 0;  
            }
            
            if ( max < nums[i]) {
                max = nums[i];
            }
            
            
            if (currentSum > currentMax) {
                currentMax = currentSum;
            }
            
            if (currentMax > overAllMax ) {
                overAllMax = currentMax;
            }
            
        }
        
        if (max < 0)
            return max;
        else
            return overAllMax;
    }
}


<58>

class Solution {
    public int lengthOfLastWord(String s) {
        
        if (s.length() == 0) {
            return 0;
        }
        
        int count = 0;
        int i = s.length() -1;
        
        
        while(i >= 0 && s.charAt(i) == ' ') {
            i --;
        }
        
        while (i >= 0 && s.charAt(i) != ' ') {
            i --;
            count ++;
        }
        return count;
    }
}


<66>
class Solution {
    public int[] plusOne(int[] digits) {
        
        LinkedList<Integer> linkedlist = new LinkedList<> ();

        int i = digits.length -1 ;
        boolean adding = true;
        while (i >= 0) {
            if (adding && digits[i] == 9) {
                digits[i] = 0;
            } else if ( adding && digits[i]!= 9) {
                digits[i] = digits[i] + 1;
                adding = false;
            }
            
            
            linkedlist.addFirst(digits[i]);
            i -= 1;
        }
        if (adding) {
            linkedlist.addFirst(1);
        }

        int []answer = new int[linkedlist.size()];
        int j = 0;
        for (Integer num : linkedlist ) {
            answer[j] = num;
            System.out.println(num);
            j++;
        }
        
        return answer;
    }
}
<414>

class Solution {
    public int thirdMax(int[] nums) {
         
//         if (nums.length == 1) return nums[0]; 
        
//         if (nums.length == 2) return nums[0]>=nums[0] ? nums[0] : nums[1];

        PriorityQueue<Integer> pq = new PriorityQueue();
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            if ( set.add(num) ) {
                pq.add(num);
                if (pq.size()> 3) {
                    pq.poll();
                }
            }
        }
        if (pq.size() < 3) {
            while (pq.size() > 1) {
                pq.poll();
            }
        }
        return pq.peek();

    }
}
<415>

        int i = num1.length() -1 ;
        int j = num2.length() -1 ;
        int carry = 0;

        while (i >=0 || j >=0 || carry > 0) {
            int x =   i >= 0 ? num1.charAt(i) - '0' : 0 ;
            int y =   j >= 0 ? num2.charAt(j) - '0' : 0 ;

            sb.append  ((x + y + carry)%10);
            carry =(x + y + carry)/10;
            i --;
            j --;
        }