7. Reverse Integer

class Solution {
    public int reverse(int x) {
        int sign = 1;
        
        while (x % 10 == 0 && x!=0) 
            x = x / 10;
        
        int y = 0;
        String str, strReverse;
        
        if ( x > 2147483647 || x < -2147483648 || x == 0)
            return 0;
        
        if ( x<0 ) {
            y = - x;
            sign = -1;
        }
        else {
            y = x;
            sign = 1;
        }
        
        str = Integer.toString(y);  // z contains number string
        
        StringBuilder sb = new StringBuilder(str);
        
        
        strReverse = sb.reverse().toString();
        
        try{
            y = Integer.valueOf(strReverse);
        }catch (NumberFormatException ex) { 
            // handle your exception
            return 0;
        }
        
        y = y * sign;
        
        return y;
        
    }
}


solutioon:

        int rev = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;
            if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
            rev = rev * 10 + pop;
        }
        return rev;



problem 9:

my solution:

class Solution {
    public boolean isPalindrome(int x) {
        
        String str = Integer.toString(x);
        
        
        StringBuilder sb = new StringBuilder(str);
        String strRev = sb.reverse().toString();
        
        if (strRev.equals(str)) 
            return true;
        else
            return false;
        
    }
}





sample solution:

    class Solution {
    public boolean isPalindrome(int x) {
        
        if(x<0){
            return false;
        }
        
        int length = String.valueOf(x).length();
        int[] digits = new int[length];
        
        for(int i = 0; i<length; i++){
            digits[i] = x % 10;
            x = x / 10;
        }
        
        for(int j = 0; j < digits.length/2; j++){
            if(digits[j] != digits[digits.length - 1 - j]){
                return false;
            }
        }
        
        return true;
        
    }
}